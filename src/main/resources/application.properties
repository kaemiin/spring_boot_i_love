# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.context-path=/password

# LOGGING
logging.level.root=ERROR
logging.level.org.springframework.web=ERROR
logging.level.org.hibernate=ERROR

# CORS support
endpoints.cors.allowed-origins=http://example.com
endpoints.cors.allowed-methods=GET,POST

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.show-sql=true

# SPRING MVC (WebMvcProperties)
spring.mvc.throw-exception-if-no-handler-found=true

# JMS (JmsProperties)
#spring.jms.jndi-name=jms/MailQueue

# Email (MailProperties)
#spring.mail.jndi-name=mail/Invitation
spring.mail.default-encoding=UTF-8
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.protocol=smtp
spring.mail.username=kaemiin@xinosys.com
spring.mail.password=my_password
spring.mail.properties.mail.from=kaemiin@xinosys.com
spring.mail.properties.mail.smtp.starttls.enable=true

# REDIS (RedisProperties)
# Redis數據庫索引（默認為0）
#spring.redis.database=0
# Redis服務器地址
#spring.redis.host=localhost
# Redis服務器連接端口
#spring.redis.port=6379
# Redis服務器連接密碼（默認為空）
#spring.redis.password=
# 連接池最大連接數（使用負值表示沒有限制）
#spring.redis.pool.max-active=8
# 連接池最大阻塞等待時間（使用負值表示沒有限制）
#spring.redis.pool.max-wait=-1
# 連接池中的最大空閑連接
#spring.redis.pool.max-idle=8
# 連接池中的最小空閒連接
#spring.redis.pool.min-idle=0
# 連接超時時間（毫秒）
#spring.redis.timeout=0

# MYSQL (MySQLProperties)
spring.datasource.url=jdbc:mysql://localhost/db
spring.datasource.username=kaemiin
spring.datasource.password=my_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# Number of ms to wait before throwing an exception if no connection is available.
spring.datasource.tomcat.max-wait=10000
# Maximum number of active connections that can be allocated from this pool at the same time.
spring.datasource.tomcat.max-active=50
# Validate the connection before borrowing it from the pool.
spring.datasource.tomcat.test-on-borrow=true

#If you are deploying your Spring Boot application to an Application Server you might want to configure and manage your DataSource using your Application Servers built-in features and access it using JNDI.
#spring.datasource.jndi-name=java:jdbc/db